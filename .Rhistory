install.packages(Kern.Smooth)
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
for (i in 1:10) {}
for (i in 1:10) {print(i)}
for(i=1;i<10,i++){print(i)}
x<- matrix (1:6,2,3)
for(i in seqlen(nrow(x))) {}
for(i in seqlen(nrow(x))) {for j in seq_len(ncol(x)))} print(x[i,j]) }}
for(i in seq_len(nrow(x))) {for j in seq_len(ncol(x)))} print(x[i,j]) }}
for(i in seq_len(nrow(x))) { for( j in seq_len(ncol(x)))} print(x[i,j]) }}
for(i in seq_len(nrow(x))) { for( j in seq_len(ncol(x))){ print(x[i,j]) }}
}
print(x[i,j])
println(x[i,j])
print(x[i,j])
}
}
}
x<- matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))){
print(x[i,j])
}
}
#x<- matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))){
print(x[i,j])
}
}
for(i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))){
print(x[i,j])
}
}
swirl()
swirl()
swirl::
install.packages("swirl")
install.packages("swirl")
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4>3.9
0
bye()
library(swirl)
swirl()
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
add2(3,5)
}
}
add2(3,5)
add2 <- function(x, y) {
x+y}
add2 <- function(x, y)
add2(3,5)
above <- function(x,n) {
use <- x>n
x[use]
}
x <- 1:20
above(X)
above (x,12)
}
above <- function(x,n) {
use <- x>n
x[use]
print(x[use])
}
above <- function(x,n) {
use <- x>n
x[use]
print(x[use])
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- means(y[i])
meansci
}
}
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- means(y[i])
means
}
}
columnmean(airquality)
columnmean <-function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div =2)
args(remainder)
submit()
submit()
submit()
submit()
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(sd(c(1.4,3.6,7.9,8.8)))
func <- sd
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x-6}, c(8,4,0))
evaluate(function(x-1), c(8,4,0))
evaluate(function(x){x*4},c(8,4,0))
info()
evaluate(function(x),c(8,4,0))
evaluate(function(x){x+1},c((8,4,0)))
evaluate(function(x){x*4},c(8,4,0))
evaluate(function(x) {x> 2 && TRUE},c(8,4,0))
evaluate(function(x) {c[1]},c(8,4,0))
evaluate(function(x) { x[x>5] },c(8,4,0))
evaluate(function(x) { x[1] },c(8,4,0))
evaluate(function(x) { x[0] },c(8,4,0))
evaluate(function(x) {x[3]}, c(8,4,0))
evalutate(function(x) {x[x.length]}, c(8,4,0))
evalutate(function(x) {x[length]}, c(8,4,0))
evalutate(function(x) {x[length(x)]}, c(8,4,0))
evalutate(function(x) {x[length(c)]}, c(8,4,0))
evalutate(function(x) {x[length(dat)]}, c(8,4,0))
evalutate(function(x) {x[length()]}, c(8,4,0))
evalutate(function(x) {x[length(x)]}, c(8,4,0))
evaluate(function(x) {x[length(dat)]}, c(8,4,0))
evaluate(function(x) {x[length(x) <- n]}, c(8,4,0))
evaluate(function(x) {x[length(x) <- n]}, c(8,4,0))
evaluate(function(x) {x[length(x) <- c]}, c(8,4,0))
evaluate(function(x) {x[length(x) <- x]}, c(8,4,0))
evaluate(function(x) {x[length(x) <- dat]}, c(8,4,0))
evaluate(function(x) {x[length(x)]}, c(8,4,0))
?paste
bye()
swirl()
paste("Programming", "is", "fun")
paste("Programmin", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
telegram(Hi)
telegram
telegram(c("Yo","Yo"))
submit()
submit()
mad_libs("desert","beastly","water drop")
submit()
submit()
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
skip()
"I" %p% "Love" %p% "R"
"I" %p% "Love" %p% "R!"
"I" %p% "love" %p% "R!"
library(swirl)
swirl()
?matrix
matrix(1:20,4,5)
my_matrix2<matrix(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
x
x[1:10]
x[is.na(x)]
y <-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x(x[0])
x(i.e. x[0])
x[c(0)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2,norft=NA)
vector <- c(foo = 11, bar = 2, norf = NA)
vect <- c(foo  = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
idetical(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
?colMeans
printmessage<- function(x){}
printmessage<- function(x){
if (x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage(1)
printmessage(0)
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <-sapply(flags,class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?taply
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red, sumamry)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass,summary)
